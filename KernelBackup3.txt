
float distanceSquared(float3 object, float3 other) {
	float3 delta = object-other;
	float edge1Sqrd = (delta.y * delta.y) + (delta.z * delta.z);
	return (delta.x * delta.x) + edge1Sqrd;
}

float3 getColor(const float3 rayPosition, const float3 rayDirection, __global const float *world, float3 * nextRayPosition, float3 * nextRayDirection) {
		//World data
	int sp_posx = 0;
	int sp_posy = 1;
	int sp_posz = 2;
	int sp_rad 	= 3;
	int sp_r	= 4;
	int sp_g	= 5;
	int sp_b	= 6;
	int sphereSize 	= 7;
	int lightSize 	= 7;

	int li_posx = 0;
	int li_posy = 1;
	int li_posz = 2;
	int li_str 	= 3;
	int li_r	= 4;
	int li_g	= 5;
	int li_b	= 6;

	int offsetSpheres = (int)world[0];
	int numSpheres = (int)world[1];
	int offsetLights = (int)world[2];
	int numLights = (int)world[3];
	uint cameraOffset = (int)world[4];







	float maxVal =  100000;
	float closestHit = 100000;
	int closestSphere = -1;
	float epsilon = 0.000001f;

	//Check for hit with each sphere
	for(int index = 0; index < numSpheres; index++) {
		float3 spherePosition = (float3)(	world[offsetSpheres + index*sphereSize + sp_posx],
											world[offsetSpheres + index*sphereSize + sp_posy],
											world[offsetSpheres + index*sphereSize + sp_posz]);

		float rayToSphereSquared = distanceSquared(rayPosition, spherePosition);

		float travelDistanceClosestPoint = dot(rayDirection, spherePosition - rayPosition);
//return (int)(travelDistanceClosestPoint*10000);
		if(!(travelDistanceClosestPoint < 0)) {
			float minDistanceRaySphereSquared = rayToSphereSquared - (travelDistanceClosestPoint*travelDistanceClosestPoint);
		//if minDistanceRaySquared is < 0, that means that the closest distance is farther than the radius, meaning the ray missed
			if (!(minDistanceRaySphereSquared < -epsilon)) {
				float halfDistanceInsideSphere = sqrt(world[offsetSpheres + index*sphereSize + sp_rad]*world[offsetSpheres + index*sphereSize + sp_rad] - minDistanceRaySphereSquared);
				closestSphere = travelDistanceClosestPoint - halfDistanceInsideSphere < closestHit ? index : closestSphere;
				closestHit = travelDistanceClosestPoint - halfDistanceInsideSphere < closestHit ? travelDistanceClosestPoint - halfDistanceInsideSphere : closestHit;
			}
		}
	}

	//if there was a hit calculate lighing
	if (closestHit == maxVal)
	    return 0;
		//return (float3)(closestHit)/20;
		float3 surfaceColor =  (float3)(0,0,0);

		for (int index = 0; index < numLights; index++) {
		float3 lightPosition = (float3)(	world[offsetLights + index * lightSize + li_posx],
											world[offsetLights + index * lightSize + li_posy],
											world[offsetLights + index * lightSize + li_posz]);

			//first check if there is something obstruction the light ray
			//Travel the ray
			float3 hitLocation = (float3)(	rayPosition.x + rayDirection.x*closestHit,
											rayPosition.y + rayDirection.y*closestHit,
											rayPosition.z + rayDirection.z*closestHit);

			//Check if shadowed from light

			int lightShadowed = 0;
			float lightToSurfaceDistance = distance(lightPosition, hitLocation);
			float ch = maxVal;
			float cs = -1;
			//return (float3)(lightToSurfaceDistance)/10;
			float3 lightToSurfaceDirection = normalize(hitLocation - lightPosition);
			for(int index_s = 0; index_s < numSpheres; index_s++) {

				float3 spherePosition = (float3)(world[offsetSpheres + index_s*sphereSize + sp_posx],
												world[offsetSpheres + index_s*sphereSize + sp_posy],
												world[offsetSpheres + index_s*sphereSize + sp_posz]);



				float rayToSphereSquared = distanceSquared(lightPosition, spherePosition);

				float travelDistanceClosestPoint = dot(lightToSurfaceDirection, spherePosition - lightPosition);
				//return (int)(travelDistanceClosestPoint*10000);
				if(!(travelDistanceClosestPoint < 0)) {
					float minDistanceRaySphereSquared = rayToSphereSquared - (travelDistanceClosestPoint*travelDistanceClosestPoint);
				//if minDistanceRaySquared is < 0, that means that the closest distance is farther than the radius, meaning the ray missed
					if (!(minDistanceRaySphereSquared < -epsilon)) {
						float halfDistanceInsideSphere = sqrt(world[offsetSpheres + index*sphereSize + sp_rad]*world[offsetSpheres + index*sphereSize + sp_rad] - minDistanceRaySphereSquared);
						//closestSphere = travelDistanceClosestPoint - halfDistanceInsideSphere < closestHit ? index : closestSphere;
						//closestHit = travelDistanceClosestPoint - halfDistanceInsideSphere < closestHit ? travelDistanceClosestPoint - halfDistanceInsideSphere : closestHit;
						//return ((travelDistanceClosestPoint - halfDistanceInsideSphere))/500;
						if(index_s != closestSphere && ((travelDistanceClosestPoint - halfDistanceInsideSphere) < lightToSurfaceDistance)) {
							lightShadowed = true;
							index_s = numSpheres;
						}
					}
				}
			}


			/*
				float3 spherePosition = (float3)(	world[offsetSpheres + index_s*sphereSize + sp_posx],
											world[offsetSpheres + index_s*sphereSize + sp_posy],
											world[offsetSpheres + index_s*sphereSize + sp_posz]);

				float3 lightToSurfaceNormal = normalize(hitLocation - lightPosition);
				float rayToSphereSquared = distanceSquared(rayPosition, spherePosition);
				float travelDistanceClosestPoint = dot(lightToSurfaceNormal, spherePosition - (lightToSurfaceNormal));
				if(!(travelDistanceClosestPoint < 0)) {
					float minDistanceRaySphereSquared = rayToSphereSquared - (travelDistanceClosestPoint*travelDistanceClosestPoint);
					//if minDistanceRaySquared is < 0, that means that the closest distance is farther than the radius, meaning the ray missed
					if (!(minDistanceRaySphereSquared < -epsilon)) {
						//lightShadowed = true;
						float halfDistanceInsideSphere = sqrt(world[offsetSpheres + index*sphereSize + sp_rad]*world[offsetSpheres + index*sphereSize + sp_rad] - minDistanceRaySphereSquared);
						lightShadowed = lightShadowed || ((travelDistanceClosestPoint - halfDistanceInsideSphere) < lightToSurfaceDistance - epsilon);
					}
				}
				*/

			float3 surfaceNormal =
				normalize((
				(float3)(	world[offsetSpheres + closestSphere*sphereSize + sp_posx],
							world[offsetSpheres + closestSphere*sphereSize + sp_posy],
							world[offsetSpheres + closestSphere*sphereSize + sp_posz]) - hitLocation ));
				//) / world[offsetSpheres + closestSphere*sphereSize + sp_rad]);

			//return (int)(closestSphere*sphereSize);



        //this = cameraDirection, other = surfacenormal
        //cameraDirection - (surfacenormal * dot(cameraDirection, surfacenormal)*2)

			*nextRayDirection = normalize(rayDirection - (surfaceNormal * dot(rayDirection, surfaceNormal)*2));
			*nextRayPosition = hitLocation+(*nextRayDirection*0.01f);// + *nextRayDirection * -0.05f;// (0.1f * *nextRayDirection);
			if (!lightShadowed) {
				//start with diffuse light
				float3 lightToSurfaceNormal = normalize(hitLocation - lightPosition);

				float dotProduct = dot(lightToSurfaceNormal, surfaceNormal);
				if (dotProduct > 0) {


					surfaceColor = surfaceColor + (
					(float3)(	world[offsetLights + index * lightSize + li_r],
								world[offsetLights + index * lightSize + li_g],
								world[offsetLights + index * lightSize + li_b]) *
					(world[offsetLights + index * lightSize + li_str] / distance(hitLocation, lightPosition)) *
					dotProduct *
					(float3)(	world[offsetSpheres + closestSphere*sphereSize + sp_r],
								world[offsetSpheres + closestSphere*sphereSize + sp_g],
								world[offsetSpheres + closestSphere*sphereSize + sp_b]));

					//float3 surfaceColor = (float3)(1,1,1)*;
					//float3 surfaceColor = surfaceNormal/2+(float3)(0.5,0.5,0.5);
					//float3 surfaceColor = (float3)(1,1,1) * dotProduct;
					//add specular light
					float3 surfaceToCameraDir = normalize(hitLocation - rayPosition);
					//Vector3 surfaceToCameraDir = hitLocation.subtract(cameraRay.origin).normalize();
					float3 reflectionDirection = normalize(lightToSurfaceNormal - (surfaceNormal*dot(lightToSurfaceNormal,surfaceNormal)*2));

					//REFLECT: normalize(lightToSurfaceNormal - (surfaceNormal*dot(lightToSurfaceNormal,surfaceNormal)*2))

					float specular = -1 * dot(surfaceToCameraDir, reflectionDirection);
					//double specular = -1 * surfaceToCameraDir.dot(reflectionDirection);
					if (specular > 0 ) {
						specular = pow(specular, 100);
						surfaceColor = surfaceColor + (((float3)(specular, specular, specular)) * world[offsetLights + (index * lightSize) + li_str]/(distance(lightPosition, hitLocation)/10))*
						(float3)(	world[offsetLights + index * lightSize + li_r],
								world[offsetLights + index * lightSize + li_g],
								world[offsetLights + index * lightSize + li_b]);
						//returnRay = new Ray(hitLocation, cameraRay.direction.reflect(surfaceNormal));
						//returnRay.origin=returnRay.travel(0.01);
					}
				//surfaceColor = (lightToSurfaceNormal+(float3)(1,1,1))*255/2;
				//return (int)(dotProduct*255);

				}
			}
		}
		return surfaceColor;//= clamp(surfaceColor, 0.0f, 1.0f)*255;


	nextRayDirection = 0;
	nextRayPosition = 0;
	return 0;
}

__kernel void sampleKernel(__global const float *world, __global int *output, __global int *c) {

		//World data
	int sp_posx = 0;
	int sp_posy = 1;
	int sp_posz = 2;
	int sp_rad 	= 3;
	int sp_r	= 4;
	int sp_g	= 5;
	int sp_b	= 6;
	int sphereSize 	= 7;
	int lightSize 	= 7;

	int li_posx = 0;
	int li_posy = 1;
	int li_posz = 2;
	int li_str 	= 3;
	int li_r	= 4;
	int li_g	= 5;
	int li_b	= 6;

	int offsetSpheres = (int)world[0];
	int numSpheres = (int)world[1];
	int offsetLights = (int)world[2];
	int numLights = (int)world[3];
	uint cameraOffset = (int)world[4];

	//Screen data
	int screenWidth = 900;
	int screenHeight = 900;

	int gid = get_global_id(0);
	int pixelX = gid%screenWidth;
	int pixelY = gid/screenWidth;

	//Other data
	float orthogonalSize = 60;

	//const float * worldP = world;


	//Render
                //double reflectivityFactor = 0.6;
                //Ray cameraRay;
                //Vector3 surfaceColor;
                //Pair<Vector3, Ray> results;

                    //calculate if the ray hit any object, and at what distance
					float3 cameraPosition = (float3)(world[cameraOffset], world[cameraOffset + 1], world[cameraOffset + 2]);
					float3 cameraDirection = (float3)(world[cameraOffset+3], world[cameraOffset + 4], world[cameraOffset + 5]);
					float3 cameraLookPlaneUP = (float3)(world[cameraOffset+6], world[cameraOffset + 7], world[cameraOffset + 8]);
					float3 cameraLookPlaneRIGHT = (float3)(world[cameraOffset+9], world[cameraOffset + 10], world[cameraOffset + 11]);

					float3 rayPosition = cameraPosition +
										(cameraLookPlaneUP *	orthogonalSize * (0.5f -((float)pixelY/screenHeight))) +
										(cameraLookPlaneRIGHT *	orthogonalSize * (0.5f -((float)pixelX/screenWidth)));

					float3 rayDirection = cameraDirection;
					float3 surfaceColor;
					surfaceColor = getColor(rayPosition, rayDirection, world, &rayPosition, &rayDirection);
					int iterations = 0;
					int maxIterations = 5;

					while(&rayPosition != 0 && iterations < maxIterations) {
						iterations++;
						float3 reflectedColor = getColor(rayPosition, rayDirection, world, &rayPosition, &rayDirection);
						//surfaceColor = reflectedColor == (float3)(0,0,0) ? surfaceColor :mix(surfaceColor, reflectedColor,0.0f)+reflectedColor*0.2f;
						surfaceColor += reflectedColor*(4/(iterations + 10.0f));
					}
					surfaceColor = clamp(surfaceColor, 0.0f,1.0f)*255.0f;
					c[gid] = (((int)(surfaceColor.x)<<16)+((int)(surfaceColor.y)<<8)+((int)(surfaceColor.z)));
					return;
}

